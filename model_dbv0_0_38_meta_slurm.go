/*
Slurm Rest API

API to access and control Slurm DB.

API version: dbv0.0.38
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestopenapi

import (
	"encoding/json"
)

// checks if the Dbv0038MetaSlurm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038MetaSlurm{}

// Dbv0038MetaSlurm Slurm information
type Dbv0038MetaSlurm struct {
	Version *Dbv0038MetaSlurmVersion `json:"version,omitempty"`
	// version specifier
	Release *string `json:"release,omitempty"`
}

// NewDbv0038MetaSlurm instantiates a new Dbv0038MetaSlurm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038MetaSlurm() *Dbv0038MetaSlurm {
	this := Dbv0038MetaSlurm{}
	return &this
}

// NewDbv0038MetaSlurmWithDefaults instantiates a new Dbv0038MetaSlurm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038MetaSlurmWithDefaults() *Dbv0038MetaSlurm {
	this := Dbv0038MetaSlurm{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Dbv0038MetaSlurm) GetVersion() Dbv0038MetaSlurmVersion {
	if o == nil || IsNil(o.Version) {
		var ret Dbv0038MetaSlurmVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038MetaSlurm) GetVersionOk() (*Dbv0038MetaSlurmVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Dbv0038MetaSlurm) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given Dbv0038MetaSlurmVersion and assigns it to the Version field.
func (o *Dbv0038MetaSlurm) SetVersion(v Dbv0038MetaSlurmVersion) {
	o.Version = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *Dbv0038MetaSlurm) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038MetaSlurm) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *Dbv0038MetaSlurm) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *Dbv0038MetaSlurm) SetRelease(v string) {
	o.Release = &v
}

func (o Dbv0038MetaSlurm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038MetaSlurm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	return toSerialize, nil
}

type NullableDbv0038MetaSlurm struct {
	value *Dbv0038MetaSlurm
	isSet bool
}

func (v NullableDbv0038MetaSlurm) Get() *Dbv0038MetaSlurm {
	return v.value
}

func (v *NullableDbv0038MetaSlurm) Set(val *Dbv0038MetaSlurm) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038MetaSlurm) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038MetaSlurm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038MetaSlurm(val *Dbv0038MetaSlurm) *NullableDbv0038MetaSlurm {
	return &NullableDbv0038MetaSlurm{value: val, isSet: true}
}

func (v NullableDbv0038MetaSlurm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038MetaSlurm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
